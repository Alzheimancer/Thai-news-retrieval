<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<config>

    <luceneMatchVersion>6.6.0</luceneMatchVersion>


    <lib dir="${solr.install.dir:../../../..}/contrib/extraction/lib" regex=".*\.jar"/>
    <lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-cell-\d.*\.jar"/>

    <lib dir="${solr.install.dir:../../../..}/contrib/clustering/lib/" regex=".*\.jar"/>
    <lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-clustering-\d.*\.jar"/>

    <lib dir="${solr.install.dir:../../../..}/contrib/langid/lib/" regex=".*\.jar"/>
    <lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-langid-\d.*\.jar"/>

    <lib dir="${solr.install.dir:../../../..}/contrib/velocity/lib" regex=".*\.jar"/>
    <lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-velocity-\d.*\.jar"/>

    <dataDir>${solr.data.dir:}</dataDir>


    <directoryFactory name="DirectoryFactory"
                      class="${solr.directoryFactory:solr.NRTCachingDirectoryFactory}"/>

    <codecFactory class="solr.SchemaCodecFactory"/>

    <schemaFactory class="ClassicIndexSchemaFactory"/>


    <indexConfig>

        <lockType>${solr.lock.type:native}</lockType>


    </indexConfig>


    <jmx/>

    <updateHandler class="solr.DirectUpdateHandler2">


        <autoCommit>
            <maxTime>${solr.autoCommit.maxTime:15000}</maxTime>
            <openSearcher>false</openSearcher>
        </autoCommit>


        <autoSoftCommit>
            <maxTime>${solr.autoSoftCommit.maxTime:-1}</maxTime>
        </autoSoftCommit>


    </updateHandler>


    <query>

        <maxBooleanClauses>1024</maxBooleanClauses>


        <filterCache class="solr.FastLRUCache"
                     size="512"
                     initialSize="512"
                     autowarmCount="0"/>

        <!-- Query Result Cache

             Caches results of searches - ordered lists of document ids
             (DocList) based on a query, a sort, and the range of documents requested.
             Additional supported parameter by LRUCache:
                maxRamMB - the maximum amount of RAM (in MB) that this cache is allowed
                           to occupy
          -->
        <queryResultCache class="solr.LRUCache"
                          size="512"
                          initialSize="512"
                          autowarmCount="0"/>

        <!-- Document Cache

             Caches Lucene Document objects (the stored fields for each
             document).  Since Lucene internal document ids are transient,
             this cache will not be autowarmed.
          -->
        <documentCache class="solr.LRUCache"
                       size="512"
                       initialSize="512"
                       autowarmCount="0"/>

        <!-- custom cache currently used by block join -->
        <cache name="perSegFilter"
               class="solr.search.LRUCache"
               size="10"
               initialSize="0"
               autowarmCount="10"
               regenerator="solr.NoOpRegenerator"/>


        <enableLazyFieldLoading>true</enableLazyFieldLoading>


        <queryResultWindowSize>20</queryResultWindowSize>

        <!-- Maximum number of documents to cache for any entry in the
             queryResultCache.
          -->
        <queryResultMaxDocsCached>200</queryResultMaxDocsCached>


        <listener event="newSearcher" class="solr.QuerySenderListener">
            <arr name="queries">
                <!--
                   <lst><str name="q">solr</str><str name="sort">price asc</str></lst>
                   <lst><str name="q">rocks</str><str name="sort">weight asc</str></lst>
                  -->
            </arr>
        </listener>
        <listener event="firstSearcher" class="solr.QuerySenderListener">
            <arr name="queries">
                <!--
                <lst>
                  <str name="q">static firstSearcher warming in solrconfig.xml</str>
                </lst>
                -->
            </arr>
        </listener>

        <!-- Use Cold Searcher

             If a search request comes in and there is no current
             registered searcher, then immediately register the still
             warming searcher and use it.  If "false" then all requests
             will block until the first searcher is done warming.
          -->
        <useColdSearcher>false</useColdSearcher>

    </query>


    <requestDispatcher handleSelect="false">

        <requestParsers enableRemoteStreaming="true"
                        multipartUploadLimitInKB="2048000"
                        formdataUploadLimitInKB="2048"
                        addHttpRequestToContext="false"/>


        <httpCaching never304="true"/>

    </requestDispatcher>


    <requestHandler name="/select" class="solr.SearchHandler">
        <!-- default values for query parameters can be specified, these
             will be overridden by parameters in the request
          -->
        <lst name="defaults">
            <str name="echoParams">explicit</str>
            <int name="rows">10</int>
            <str name="df">content</str>
            <str name="defType">edismax</str>
            <str name="qf">title^40 keywords^35 description^15 content^10</str>
            <str name="pf">title keywords description content</str>
            <str name="sow">true</str>
            <str name="mm">2 &lt; -25% 9 &lt; -3</str>
        </lst>
    </requestHandler>

    <!-- A request handler that returns indented JSON by default -->
    <requestHandler name="/query" class="solr.SearchHandler">
        <lst name="defaults">
            <str name="echoParams">explicit</str>
            <str name="wt">json</str>
            <str name="indent">true</str>
            <str name="df">content</str>
        </lst>
    </requestHandler>


    <!-- A Robust Example

         This example SearchHandler declaration shows off usage of the
         SearchHandler with many defaults declared

         Note that multiple instances of the same Request Handler
         (SearchHandler) can be registered multiple times with different
         names (and different init parameters)
      -->
    <requestHandler name="/browse" class="solr.SearchHandler" useParams="query,facets,velocity,browse">
        <lst name="defaults">
            <str name="echoParams">explicit</str>
        </lst>
    </requestHandler>

    <initParams path="/update/**,/query,/select,/tvrh,/elevate,/spell,/browse">
        <lst name="defaults">
            <str name="df">content</str>
        </lst>
    </initParams>


    <searchComponent name="spellcheck" class="solr.SpellCheckComponent">

        <str name="queryAnalyzerFieldType">text_icu</str>


        <!-- a spellchecker built from a field of the main index -->
        <lst name="spellchecker">
            <str name="name">default</str>
            <str name="field">content</str>
            <str name="classname">solr.DirectSolrSpellChecker</str>
            <!-- the spellcheck distance measure used, the default is the internal levenshtein -->
            <str name="distanceMeasure">internal</str>
            <!-- minimum accuracy needed to be considered a valid spellcheck suggestion -->
            <float name="accuracy">0.5</float>
            <!-- the maximum #edits we consider when enumerating terms: can be 1 or 2 -->
            <int name="maxEdits">2</int>
            <!-- the minimum shared prefix when enumerating terms -->
            <int name="minPrefix">1</int>
            <!-- maximum number of inspections per result. -->
            <int name="maxInspections">5</int>
            <!-- minimum length of a query term to be considered for correction -->
            <int name="minQueryLength">4</int>
            <!-- maximum threshold of documents a query term can appear to be considered for correction -->
            <float name="maxQueryFrequency">0.01</float>
            <!-- uncomment this to require suggestions to occur in 1% of the documents
              <float name="thresholdTokenFrequency">.01</float>
            -->
            <str name="buildOnCommit">true</str>
        </lst>


        <lst name="spellchecker">
            <str name="name">wordbreak</str>
            <str name="classname">solr.WordBreakSolrSpellChecker</str>
            <str name="field">content</str>
            <str name="combineWords">true</str>
            <str name="breakWords">true</str>
            <int name="maxChanges">10</int>
            <str name="buildOnCommit">true</str>
        </lst>

    </searchComponent>

    <!-- A request handler for demonstrating the spellcheck component.

         NOTE: This is purely as an example.  The whole purpose of the
         SpellCheckComponent is to hook it into the request handler that
         handles your normal user queries so that a separate request is
         not needed to get suggestions.

         IN OTHER WORDS, THERE IS REALLY GOOD CHANCE THE SETUP BELOW IS
         NOT WHAT YOU WANT FOR YOUR PRODUCTION SYSTEM!

         See http://wiki.apache.org/solr/SpellCheckComponent for details
         on the request parameters.
      -->
    <requestHandler name="/spell" class="solr.SearchHandler" startup="lazy">
        <lst name="defaults">
            <str name="spellcheck.dictionary">default</str>
            <str name="spellcheck.dictionary">wordbreak</str>
            <str name="spellcheck">on</str>
            <str name="spellcheck.extendedResults">true</str>
            <str name="spellcheck.count">10</str>
            <str name="spellcheck.alternativeTermCount">5</str>
            <str name="spellcheck.maxResultsForSuggest">5</str>
            <str name="spellcheck.collate">true</str>
            <str name="spellcheck.collateExtendedResults">true</str>
            <str name="spellcheck.maxCollationTries">10</str>
            <str name="spellcheck.maxCollations">5</str>
        </lst>
        <arr name="last-components">
            <str>spellcheck</str>
        </arr>
    </requestHandler>

    <!-- Term Vector Component

         http://wiki.apache.org/solr/TermVectorComponent
      -->
    <searchComponent name="tvComponent" class="solr.TermVectorComponent"/>

    <!-- A request handler for demonstrating the term vector component

         This is purely as an example.

         In reality you will likely want to add the component to your
         already specified request handlers.
      -->
    <requestHandler name="/tvrh" class="solr.SearchHandler" startup="lazy">
        <lst name="defaults">
            <bool name="tv">true</bool>
        </lst>
        <arr name="last-components">
            <str>tvComponent</str>
        </arr>
    </requestHandler>

    <!-- Clustering Component. (Omitted here. See the default Solr example for a typical configuration.) -->

    <!-- Terms Component

         http://wiki.apache.org/solr/TermsComponent

         A component to return terms and document frequency of those
         terms
      -->
    <searchComponent name="terms" class="solr.TermsComponent"/>

    <!-- A request handler for demonstrating the terms component -->
    <requestHandler name="/terms" class="solr.SearchHandler" startup="lazy">
        <lst name="defaults">
            <bool name="terms">true</bool>
            <bool name="distrib">false</bool>
        </lst>
        <arr name="components">
            <str>terms</str>
        </arr>
    </requestHandler>


    <searchComponent class="solr.HighlightComponent" name="highlight">
        <highlighting>
            <!-- Configure the standard fragmenter -->
            <!-- This could most likely be commented out in the "default" case -->
            <fragmenter name="gap"
                        default="true"
                        class="solr.highlight.GapFragmenter">
                <lst name="defaults">
                    <int name="hl.fragsize">100</int>
                </lst>
            </fragmenter>

            <!-- A regular-expression-based fragmenter
                 (for sentence extraction)
              -->
            <fragmenter name="regex"
                        class="solr.highlight.RegexFragmenter">
                <lst name="defaults">
                    <!-- slightly smaller fragsizes work better because of slop -->
                    <int name="hl.fragsize">70</int>
                    <!-- allow 50% slop on fragment sizes -->
                    <float name="hl.regex.slop">0.5</float>
                    <!-- a basic sentence pattern -->
                    <str name="hl.regex.pattern">[-\w ,/\n\&quot;&apos;]{20,200}</str>
                </lst>
            </fragmenter>

            <!-- Configure the standard formatter -->
            <formatter name="html"
                       default="true"
                       class="solr.highlight.HtmlFormatter">
                <lst name="defaults">
                    <str name="hl.simple.pre"><![CDATA[<em>]]></str>
                    <str name="hl.simple.post"><![CDATA[</em>]]></str>
                </lst>
            </formatter>

            <!-- Configure the standard encoder -->
            <encoder name="html"
                     class="solr.highlight.HtmlEncoder"/>

            <!-- Configure the standard fragListBuilder -->
            <fragListBuilder name="simple"
                             class="solr.highlight.SimpleFragListBuilder"/>

            <!-- Configure the single fragListBuilder -->
            <fragListBuilder name="single"
                             class="solr.highlight.SingleFragListBuilder"/>

            <!-- Configure the weighted fragListBuilder -->
            <fragListBuilder name="weighted"
                             default="true"
                             class="solr.highlight.WeightedFragListBuilder"/>

            <!-- default tag FragmentsBuilder -->
            <fragmentsBuilder name="default"
                              default="true"
                              class="solr.highlight.ScoreOrderFragmentsBuilder">
                <!--
                <lst name="defaults">
                  <str name="hl.multiValuedSeparatorChar">/</str>
                </lst>
                -->
            </fragmentsBuilder>

            <!-- multi-colored tag FragmentsBuilder -->
            <fragmentsBuilder name="colored"
                              class="solr.highlight.ScoreOrderFragmentsBuilder">
                <lst name="defaults">
                    <str name="hl.tag.pre"><![CDATA[
               <b style="background:yellow">,<b style="background:lawgreen">,
               <b style="background:aquamarine">,<b style="background:magenta">,
               <b style="background:palegreen">,<b style="background:coral">,
               <b style="background:wheat">,<b style="background:khaki">,
               <b style="background:lime">,<b style="background:deepskyblue">]]></str>
                    <str name="hl.tag.post"><![CDATA[</b>]]></str>
                </lst>
            </fragmentsBuilder>

            <boundaryScanner name="default"
                             default="true"
                             class="solr.highlight.SimpleBoundaryScanner">
                <lst name="defaults">
                    <str name="hl.bs.maxScan">10</str>
                    <str name="hl.bs.chars">.,!? &#9;&#10;&#13;</str>
                </lst>
            </boundaryScanner>

            <boundaryScanner name="breakIterator"
                             class="solr.highlight.BreakIteratorBoundaryScanner">
                <lst name="defaults">
                    <!-- type should be one of CHARACTER, WORD(default), LINE and SENTENCE -->
                    <str name="hl.bs.type">WORD</str>
                    <!-- language and country are used when constructing Locale object.  -->
                    <!-- And the Locale object will be used when getting instance of BreakIterator -->
                    <str name="hl.bs.language">en</str>
                    <str name="hl.bs.country">US</str>
                </lst>
            </boundaryScanner>
        </highlighting>
    </searchComponent>


    <queryResponseWriter name="json" class="solr.JSONResponseWriter">
        <!-- For the purposes of the tutorial, JSON responses are written as
         plain text so that they are easy to read in *any* browser.
         If you expect a MIME type of "application/json" just remove this override.
        -->
        <str name="content-type">text/plain; charset=UTF-8</str>
    </queryResponseWriter>

    <!--
       Custom response writers can be declared as needed...
      -->
    <queryResponseWriter name="velocity" class="solr.VelocityResponseWriter" startup="lazy">
        <str name="template.base.dir">${velocity.template.base.dir:}</str>
        <str name="solr.resource.loader.enabled">${velocity.solr.resource.loader.enabled:true}</str>
        <str name="params.resource.loader.enabled">${velocity.params.resource.loader.enabled:false}</str>
    </queryResponseWriter>

    <!-- XSLT response writer transforms the XML output by any xslt file found
         in Solr's conf/xslt directory.  Changes to xslt files are checked for
         every xsltCacheLifetimeSeconds.
      -->
    <queryResponseWriter name="xslt" class="solr.XSLTResponseWriter">
        <int name="xsltCacheLifetimeSeconds">5</int>
    </queryResponseWriter>


</config>
